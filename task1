import numpy as np
 print(np.__version__) np.show_config()
 Z = np.zeros(10) print(Z)
 Z = np.zeros((10,10)) print ("%d bytes"%(Z.size * Z.itemsize))
 numpy.info(numpy.add)
 Z = np.zeros(10) Z[4]=1 print (Z)
  Z = np.arange(10,50)   print(Z)
 Z = np.arange(50) Z = Z[::-1] print(Z)
 Z = np.arange(9).reshape(3,3) print(Z)
 nz = np.nonzero([1,2,0,0,4,0]) print(nz)
 Z = np.eye(3) print(Z)
 Z = np.random.random((3,3,3)) print(Z)
 Z = np.random.random((10,10)) Zmin, Zmax = Z.min(), Z.max() print(Zmin, Zmax)
 Z = np.random.random(30) m = Z.mean()print(m)
 Z = np.ones((10,10))Z[1:-1,1:-1] = 0print(Z)
Z = np.ones((5,5)) Z = np.pad(Z, pad_width=1, mode='constant', constant_values=0) print(Z)
print(0 * np.nan) print(np.nan == np.nan) print(np.inf > np.nan)
Z = np.diag(1+np.arange(4),k=-1) print(Z)
Z = np.zeros((8,8),dtype=int) Z[1::2,::2] = 1 Z[::2,1::2] = 1 print(Z)
print(np.unravel_index(100,(6,7,8)))
Z = np.tile( np.array([[0,1],[1,0]]), (4,4))  print(Z)
Z = np.random.random((5,5)) Zmax, Zmin = Z.max(), Z.min() Z = (Z - Zmin)/(Zmax - Zmin)  print(Z)
color = np.dtype([("r", np.ubyte, 1), ("g", np.ubyte, 1),("b", np.ubyte, 1),("a", np.ubyte, 1)]) color
Z = np.dot(np.ones((5,3)), np.ones((3,2))) print(Z)
Z = np.arange(11) Z[(3 < Z) & (Z <= 8)] *= -1 print(Z)
print(sum(range(5),-1)) from numpy import *print(sum(range(5),-1))
Z = np.arange(5) Z ** Z  
print(np.array(0) / np.array(0))
Z = np.random.uniform(-10,+10,10) print (np.copysign(np.ceil(np.abs(Z)), Z))
Z1 = np.random.randint(0,10,10) Z2 = np.random.randint(0,10,10) print(np.intersect1d(Z1,Z2))
Suicide mode on Back to sanity
np.sqrt(-1) == np.emath.sqrt(-1)  # False
yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D') today     = np.datetime64('today', 'D') tomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D')
Z = np.arange('2016-07', '2016-08', dtype='datetime64[D]') print(Z)
A = np.ones(3)*1  B = np.ones(3)*2 C = np.ones(3)*3 np.add(A,B,out=B)
Z = np.random.uniform(0,10,10) print (Z - Z%1)
Z = np.zeros((5,5)) Z += np.arange(5) print (Z)
def generate(): or x in range(10): yield x Z = np.fromiter(generate(),dtype=float,count=-1) print (Z)
Z = np.linspace(0,1,11,endpoint=False)[1:] print (Z)
Z = np.random.random(10) Z.sort() print (Z)
Z = np.arange(10) np.add.reduce(Z)
Z = np.random.random((10,2))
A = np.random.randint(0,2,5) B = np.random.randint(0,2,5) equal = np.allclose(A,B) print(equal)
Z = np.random.random(10) Z[Z.argmax()] = 0 print (Z)
Z = np.zeros((5,5), [('x',float),('y',float)])
Z['x'], Z['y'] = np.meshgrid(np.linspace(0,1,5),   np.linspace(0,1,5)) print(Z)
X = np.arange(8) Y = X + 0.5 C = 1.0 / np.subtract.outer(X, Y) print(np.linalg.det(C))
for dtype in [np.int8, np.int32, np.int64]:    print(np.iinfo(dtype).min)    print(np.iinfo(dtype).max)
np.set_printoptions(threshold=np.nan)Z = np.zeros((16,16)) print (Z)
Z = np.arange(100) v = np.random.uniform(0,100) index = (np.abs(Z-v)).argmin() print (Z[index])
Z = np.zeros(10, [ ('position', [ ('x', float, 1       ('y', float, 1)]), ('color',    [ ('r', float, 1),('g', float, 1),  ('b', float, 1)])]) print (Z)
Z = np.random.random((10,2)) X,Y = np.atleast_2d(Z[:,0], Z[:,1]) D = np.sqrt( (X-X.T)**2 + (Y-Y.T)**2) print (D)
Z = np.arange(10, dtype=np.int32) Z = Z.astype(np.float32, copy=False) print (Z)
Z = np.arange(9).reshape(3,3) for index, value in np.ndenumerate(Z):    print (index, value) for index in np.ndindex(Z.shape):     print (index, Z[index])
X, Y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))
D = np.sqrt(X*X+Y*Y) sigma, mu = 1.0, 0.0 G = np.exp(-( (D-mu)**2 / ( 2.0 * sigma**2 ) ) ) print (G)
n = 10 p = 3 Z = np.zeros((n,n)) np.put(Z, np.random.choice(range(n*n), p, replace=False),1) print (Z)
X = np.random.rand(5, 10) Y = X - X.mean(axis=1, keepdims=True) print(Y)
Z = np.random.randint(0,10,(3,3)) print (Z) print (Z[Z[:,1].argsort()])
Z = np.random.randint(0,3,(3,10)) print ((~Z.any(axis=0)).any())
Z = np.random.uniform(0,1,10) z = 0.5 m = Z.flat[np.abs(Z - z).argmin()] print (m)
A = np.arange(3).reshape(3,1) B = np.arange(3).reshape(1,3) it = np.nditer([A,B,None]) for x,y,z in it:      z[...] = x + y print (it.operands[2])
class NamedArray(np.ndarray):
def __new__(cls, array, name="no name"): obj = np.asarray(array).view(cls) obj.name = name return obj def __array_finalize__(self, obj):
         if obj is None: return       self.info = getattr(obj, 'name', "no name" Z = NamedArray(np.arange(10), "range_10") print (Z.name)
     np.add.at(Z, I, 1) print(Z)
X = [1,2,3,4,5,6] I = [1,3,9,3,4,1] F = np.bincount(I,X) print (F)
w,h = 16,16 I = np.random.randint(0,2,(h,w,3)).astype(np.ubyte).  n = len(np.unique(F)) print (n)
A = np.random.randint(0,10,(3,4,3,4)) sum = A.sum(axis=(-2,-1)) print (sum)
import pandas as pd print(pd.Series(D).groupby(S).mean())
np.sum(A * B.T, axis=1)
Z = np.array([1,2,3,4,5]) nz = 3 Z0 = np.zeros(len(Z) + (len(Z)-1)*(nz)) Z0[::nz+1] = Z print (Z0)
 A = np.ones((5,5,3)) B = 2*np.ones((5,5)) print (A * B[:,:,None])
 A = np.arange(25).reshape(5,5) A[[0,1]] = A[[1,0]] print (A)
faces = np.random.randint(0,100,(10,3)) F = np.roll(faces.repeat(2,axis=1),-1,axis=1) F = F.reshape(len(F)*3,2) F = np.sort(F,axis=1)
    G = F.view( dtype=[('p0',F.dtype),('p1',F.dtype)] ) G = np.unique(G) print (G)
  C = np.bincount([1,1,2,3,4,4,6]) A = np.repeat(np.arange(len(C)), C) print (A)
  Z = np.random.uniform(-1.0,1.0,100) np.negative(Z, out=Z)
  P0 = np.random.uniform(-10, 10, (10,2)) P1 = np.random.uniform(-10,10,(10,2)) p = np.random.uniform(-10, 10, (10,2)) print (np.array([distance(P0,P1,p_i) for p_i in p]))
Z = np.arange(1,15,dtype=np.uint32) R = stride_tricks.as_strided(Z,(11,4),(4,4)) print (R)
Z = np.random.uniform(0,1,(10,10)) U, S, V = np.linalg.svd(Z) # Singular Value Decomposition rank = np.sum(S > 1e-10) print (rank)
Z = np.random.randint(0,10,50) print (np.bincount(Z).argmax())
Z = np.random.randint(0,5,(10,10)) n = 3 i = 1 + (Z.shape[0]-3) j = 1 + (Z.shape[1]-3) C = stride_tricks.as_strided(Z, shape=(i, j, n, n), strides=Z.strides + Z.strides) print (C)
Z = np.ones((16,16)) k = 4 S = np.add.reduceat(np.add.reduceat(Z, np.arange(0, Z.shape[0], k), axis=0), np.arange(0, Z.shape[1], k), axis=1)
 print (S)
 print (Z[np.argpartition(-Z,n)[:n]])
 Z = np.array([("Hello", 2.5, 3),
              ("World", 3.6, 2)]) R = np.core.records.fromarrays(Z.T,   names='col1, col2, col3',
                           formats = 'S8, f8, i8')
 print (R)
x = np.random.rand() np.power(x,3)
U = Z[Z.max(axis=1) != Z.min(axis=1),:] print (U)
print (np.unpackbits(I[:, np.newaxis], axis=1))
 Z = np.random.randint(0,2,(6,3)) T = np.ascontiguousarray(Z).view(np.dtype((np.void, Z.dtype.itemsize * Z.shape[1])))
   _, idx = np.unique(T, return_index=True)
    uZ = Z[idx]
       print (uZ)
phi = np.arange(0, 10*np.pi, 0.1)
 a = 1
 x = a*phi*np.cos(phi)
 y = a*phi*np.sin(phi)

 dr = (np.diff(x)**2 + np.diff(y)**2)**.5 # segment lengths
  r = np.zeros_like(x)
  r[1:] = np.cumsum(dr)                # integrate path
  r_int = np.linspace(0, r.max(), 200) # regular spaced path
  x_int = np.interp(r_int, r, x)       # integrate path
  y_int = np.interp(r_int, r, y)
 X = np.asarray([[1.0, 0.0, 3.0, 8.0],
                 [2.0, 0.0, 1.0, 1.0],
                 [1.5, 2.5, 1.0, 0.0]])
 n = 4
 M = np.logical_and.reduce(np.mod(X, 1) == 0, axis=-1)
 M &= (X.sum(axis=-1) == n)
 print (X[M])
X = np.random.randn(100) # random 1D array
  N = 1000 # number of bootstrap samples
 idx = np.random.randint(0, X.size, (N, X.size))
 means = X[idx].mean(axis=1)
 confint = np.percentile(means, [2.5, 97.5])
 print (confint)
