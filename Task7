import numpy as np; import pandas as pd 
value = pd. Series (['apple','orange'.'apple,'apple')*)
values
pd.unique(value)
pd.value_counts(values)
values = pd.Series ([0,1,0,0]*2)
dim = pd.Series(['apple'.'orange'])
values 
dim 
dim.take (values)
fruits = ['apple','orange','aaple','apple']*2
N = len (fruits)
df = pd.DataFrame({'fruit':fruits,'basket_id:np.arange(N),'count':np.random.randint(3,15,
'weight':np.random.uniform(0,4,:columns = ['basket_id','fruit','count','weight'])
df
fruit_cat
c = fruit_cat.values
type(c)
c.categories
c.codes
df['fruit'] = df['fruit'].astype('category')
df.fruit
my_categories = pd.Categorical(['foo','bar','baz','foo','bar'])
my_categories
categories = ['foo','bar','baz']
codes = [0,1,2,0,0,1]
my_cats_2 = pd.Categorical.from_codes(codes,categories)
my_cats_2
ordered_cat 
my_cats_2.as_ordered()
np.random.seed(12345)
draws = np.random.randn(1000)
draws = np.random.randn(1000)
draws[:5]
bins = pd.qcut(draws,4)
bins
bins = pd.qcut(draws,4,labels=['Q1','Q2','Q3','Q4'])
bins
bins.codes[:10]
bins = pd.Series(bins,name = 'quartile')
results['quaetile']
N = 10000000
draws = pd.Series(np.random.randn(N))
labels = pd.Series(['foo','bar','baz','qux']*(N//4))
categories = labels.astupe('category')
labels.memory_usage()
categorize.memory_usage()
s = pd.Series(['a','b','c','d']*2)
cat_s = s.astype('category')
cat_s
cat_s.cat.codes
cat_s.cat.categories
actual_categories = ['a','b','c','d','e']
cat_s2 = cat_s.cat.set_categories(actual_categories)
cat_s2
cat_s.value_counts()
cat_s2.value_counts()
cat_s3 = cat_s[cat_s.isin(['a','b'])]
cat_s3
cat_s3.cat.remove_unused_categories()
cat_s = pd.Series(['a','b','c','d']*2
pd.get_dummies(cat_s)
g = df.groupby ('key').value
g.mean()
g.transform(lambda x:x.mean())
g.transform('mean')
g.transform(lambda x :x*2)
g.tramsform(lambda x :x.rank(ascending = False))
g.transform(normalize)
g.apply(normalize)
g.transform('mean')
normalized
N =15 
times = pd.date_range('2017-05-20 00:00',freq = 'lmin',periods = N)
df. set_index ('time').resample('5min').coun()
time_key = pd.TimeGrouper(5min')
resampled.reset_index()

